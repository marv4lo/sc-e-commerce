'use strict';

// https://github.com/v8/v8/wiki/Stack%20Trace%20API

var stackReg = /at\s+(.*)\s+\((.*):(\d*):(\d*)\)/i;
var stackReg2 = /at\s+()(.*):(\d*):(\d*)/i;
var stacktrace = (function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$prependRest = _ref.prependRest,
      prependRest = _ref$prependRest === void 0 ? true : _ref$prependRest;

  return function (ctx) {
    var newStats = JSON.parse(JSON.stringify(ctx.stats)); // quick deep cloning

    var newRest = ctx.args.slice();
    var err = ctx.args.find(function (obj) {
      return obj instanceof Error;
    });
    var stacklist = (err || new Error()).stack.split('\n').slice(1);
    var s = stacklist[0];
    var sp = stackReg.exec(s) || stackReg2.exec(s);

    if (sp && sp.length === 5) {
      newStats.method = sp[1];
      newStats.path = sp[2];
      newStats.line = parseInt(sp[3], 10);
      newStats.pos = sp[4];
      newStats.file = newStats.path.split(/[\\/]/).pop();

      if (prependRest) {
        newRest.splice(0, 0, "(".concat(newStats.path, ":").concat(newStats.line, ")"));
      }
    }

    ctx.stats = newStats;
    ctx.args = newRest;
  };
});

module.exports = stacktrace;
