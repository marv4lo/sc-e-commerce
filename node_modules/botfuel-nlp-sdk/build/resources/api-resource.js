'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _requestPromiseNative = require('request-promise-native');

var _requestPromiseNative2 = _interopRequireDefault(_requestPromiseNative);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2017 - present, Botfuel (https://www.botfuel.io).
                                                                                                                                                           *
                                                                                                                                                           * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                           * you may not use this file except in compliance with the License.
                                                                                                                                                           * You may obtain a copy of the License at
                                                                                                                                                           *
                                                                                                                                                           * http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                           *
                                                                                                                                                           * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                           * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                           * See the License for the specific language governing permissions and
                                                                                                                                                           * limitations under the License.
                                                                                                                                                           */

var ApiResource = function ApiResource(_ref) {
  var _this = this;

  var appId = _ref.appId,
      appKey = _ref.appKey;

  _classCallCheck(this, ApiResource);

  var baseOptions = {
    headers: { 'App-Id': appId, 'App-Key': appKey },
    rejectUnauthorized: false,
    json: true
  };

  this.rp = function (options) {
    return (0, _requestPromiseNative2.default)(_extends({}, baseOptions, options, options.qs && { qs: _this.constructor.cleanParameters(options.qs) }, options.body && { body: _this.constructor.cleanParameters(options.body) }));
  };
}
/**
 * Clean parameters object by filtering out undefineds.
 *
 * @param {Object} params the parameters object.
 * @returns {Object} the clean object of parameters
 * @static
 * @memberof ApiResource
 */
;

ApiResource.cleanParameters = function (params) {
  return Object.keys(params).reduce(function (returns, element) {
    if (params[element] !== undefined) {
      return _extends({}, returns, _defineProperty({}, element, params[element]));
    }
    return returns;
  }, {});
};

exports.default = ApiResource;